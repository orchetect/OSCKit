{"metadata":{"modules":[{"name":"OSCKit"}],"role":"collectionGroup","title":"OSC Value Parsing","roleHeading":"API Collection"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/osckit.OSCKit\/documentation\/OSCKit"],["doc:\/\/osckit.OSCKit\/documentation\/OSCKit","doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/Receiving-OSC"]]},"seeAlsoSections":[{"title":"OSC Messages","generated":true,"anchor":"OSC-Messages","identifiers":["doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCMessage","doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSC-Address-Pattern-Parsing","doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSC-Value-Types"]}],"abstract":[{"type":"text","text":"Methods for parsing OSC Message value collections."}],"identifier":{"url":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSC-Value-Parsing","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Using masked() to validate and unwrap expected value types","anchor":"Using-masked-to-validate-and-unwrap-expected-value-types","level":3},{"inlineContent":[{"text":"Since local OSC “addresses” (OSC Methods) are generally considered methods (akin to functions) which take parameters (OSC values\/arguments), in most use cases an OSC Method will have a defined type mask. OSCKit provides a powerful and flexible API to both validate and strongly type an OSC value array.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Validate and unwrap value array with expected member "},{"type":"codeVoice","code":"String"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["let str = try oscMessage.values.masked(String.self)","print(\"string: \\(str)\")"]},{"inlineContent":[{"text":"The special wrapper type ","type":"text"},{"type":"codeVoice","code":"AnyOSCNumberValue"},{"text":" is able to match any number and provides easy type-erased access to its contents, converting value types if necessary automatically.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Validate and unwrap value array with expected members "},{"code":"String, Int, <number>?","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","code":["let (str, int, num) = try oscMessage.values.masked(","    String.self, Int.self, AnyOSCNumberValue?.self",")","print(str, int, num?.intValue)","print(str, int, num?.doubleValue)","print(str, int, num?.base) \/\/ access to the strongly typed integer or floating-point value"],"type":"codeListing"},{"text":"Using matches(mask:) to test for a mask with type tokens","type":"heading","level":3,"anchor":"Using-matchesmask-to-test-for-a-mask-with-type-tokens"},{"inlineContent":[{"type":"text","text":"If value unwrapping is not needed, a mere test of value types in an OSC value sequence can be done using a mask of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValueToken"},{"type":"text","text":" tokens."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This can be useful at barriers in more complex codebases where early return or error-throwing due to mismatching value masks may be wanted before the values are ever unwrapped and statically typed.","type":"text"}]},{"syntax":"swift","code":["\/\/ [String, Int, AnyOSCNumberValue?]","guard oscMessage.values.matches(","    mask: [.string, .int, .numberOptional]",") else { return }"],"type":"codeListing"},{"type":"heading","anchor":"Manually-unwrapping-expected-value-types","level":3,"text":"Manually unwrapping expected value types"},{"inlineContent":[{"type":"text","text":"It is generally easier to use "},{"type":"codeVoice","code":"masked()"},{"text":" as demonstrated above, since it handles masking, strongly typing, as well as translation of interpolated (","type":"text"},{"type":"codeVoice","code":"Int8"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int16"},{"text":", etc.) and opaque (","type":"text"},{"type":"codeVoice","code":"AnyOSCNumberValue"},{"type":"text","text":", etc.) types. However the following is generally functionally equivalent."}],"type":"paragraph"},{"inlineContent":[{"text":"Validate and unwrap value array with expected member ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["guard oscMessage.values.count == 1 else { ... }","guard let str = oscMessage.values[0] as? String else { ... } \/\/ compulsory","print(str) \/\/ String"]},{"inlineContent":[{"type":"text","text":"Validate and unwrap value array with expected members "},{"type":"codeVoice","code":"String, Int32?, Double?"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["guard (1...3).contains(oscMessage.values.count) else { ... }","guard let str = oscMessage.values[0] as? String else { ... } \/\/ compulsory","let int: Int32? = oscMessage.count > 1 ? oscMessage.values[1] as? Int32 : nil \/\/ optional","let dbl: Double? = oscMessage.count > 2 ? oscMessage.values[2] as? Double : nil \/\/ optional","print(str, int, dbl) \/\/ String, Int32?, Double?"]},{"level":3,"anchor":"Parsing-a-variable-number-of-values","text":"Parsing a variable number of values","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"It may be desired to imperatively validate and cast values when their expected mask may be unknown.","type":"text"}]},{"syntax":"swift","code":["oscMessage.values.forEach { oscValue in","    switch oscValue {","    case let val as String:","        print(val)","    case let val as Int32:","        print(val)","    default:","        \/\/ unhandled","    }","}"],"type":"codeListing"},{"level":2,"anchor":"","text":"","type":"heading"}]}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/osckit\/osc-value-parsing"]}],"topicSections":[{"identifiers":["doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValueToken","doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValueMaskError"],"anchor":"Topics"}],"references":{"doc://osckit.OSCKit/documentation/OSCKit/OSCValues":{"kind":"symbol","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValues","role":"symbol","navigatorTitle":[{"text":"OSCValues","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OSCValues"}],"type":"topic","url":"\/documentation\/osckit\/oscvalues","abstract":[],"title":"OSCValues"},"doc://osckit.OSCKit/documentation/OSCKit/Receiving-OSC":{"identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/Receiving-OSC","title":"Receiving OSC","type":"topic","abstract":[{"text":"Receiving OSC messages and bundles.","type":"text"}],"role":"collectionGroup","kind":"article","url":"\/documentation\/osckit\/receiving-osc"},"doc://osckit.OSCKit/documentation/OSCKit/OSC-Value-Types":{"abstract":[{"text":"OSC Message value types.","type":"text"}],"kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSC-Value-Types","title":"OSC Value Types","url":"\/documentation\/osckit\/osc-value-types"},"doc://osckit.OSCKit/documentation/OSCKit":{"title":"OSCKit","kind":"symbol","abstract":[{"text":"Open Sound Control (OSC) library for macOS, iOS and tvOS.","type":"text"}],"role":"collection","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit","url":"\/documentation\/osckit","type":"topic"},"doc://osckit.OSCKit/documentation/OSCKit/OSCValueToken":{"kind":"symbol","url":"\/documentation\/osckit\/oscvaluetoken","role":"symbol","navigatorTitle":[{"text":"OSCValueToken","kind":"identifier"}],"identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValueToken","title":"OSCValueToken","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OSCValueToken"}],"type":"topic","abstract":[{"identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValue","isActive":true,"type":"reference"},{"type":"text","text":" type tokens, including optional variants and opaque types."},{"text":" ","type":"text"},{"type":"text","text":"Useful for abstractions that mask sequences of values."}]},"doc://osckit.OSCKit/documentation/OSCKit/OSC-Address-Pattern-Parsing":{"role":"collectionGroup","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSC-Address-Pattern-Parsing","kind":"article","abstract":[{"text":"Methods for parsing OSC Message address patterns.","type":"text"}],"url":"\/documentation\/osckit\/osc-address-pattern-parsing","title":"OSC Address Pattern Parsing","type":"topic"},"doc://osckit.OSCKit/documentation/OSCKit/OSCMessage":{"abstract":[{"type":"text","text":"OSC Message."}],"url":"\/documentation\/osckit\/oscmessage","kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCMessage","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OSCMessage","kind":"identifier"}],"navigatorTitle":[{"text":"OSCMessage","kind":"identifier"}],"title":"OSCMessage"},"doc://osckit.OSCKit/documentation/OSCKit/OSCValueMaskError":{"url":"\/documentation\/osckit\/oscvaluemaskerror","kind":"symbol","title":"OSCValueMaskError","abstract":[{"text":"Error thrown by ","type":"text"},{"identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValues","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"code":"masked(...)","type":"codeVoice"},{"type":"text","text":" methods."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"OSCValueMaskError"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OSCValueMaskError"}],"role":"symbol","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValueMaskError"},"doc://osckit.OSCKit/documentation/OSCKit/OSCValue":{"identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValue","type":"topic","kind":"symbol","abstract":[{"text":"Protocol to which all compatible OSC value types conform.","type":"text"}],"title":"OSCValue","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"OSCValue"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"OSCValue","kind":"identifier"}],"url":"\/documentation\/osckit\/oscvalue"}}}