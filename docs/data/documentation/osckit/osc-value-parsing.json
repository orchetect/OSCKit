{"abstract":[{"type":"text","text":"Methods for parsing OSC Message value collections."}],"sections":[],"kind":"article","identifier":{"url":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSC-Value-Parsing","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/osckit.OSCKit\/documentation\/OSCKit"],["doc:\/\/osckit.OSCKit\/documentation\/OSCKit","doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/Receiving-OSC"]]},"metadata":{"title":"OSC Value Parsing","modules":[{"name":"OSCKit"}],"roleHeading":"API Collection","role":"collectionGroup"},"topicSections":[{"identifiers":["doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValueToken","doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValueMaskError"],"anchor":"Topics"}],"seeAlsoSections":[{"title":"OSC Messages","identifiers":["doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCMessage","doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSC-Address-Pattern-Parsing","doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSC-Value-Types"],"anchor":"OSC-Messages","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":3,"text":"Using masked() to validate and unwrap expected value types","anchor":"Using-masked-to-validate-and-unwrap-expected-value-types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since local OSC “addresses” (OSC Methods) are generally considered methods (akin to functions) which take parameters (OSC values\/arguments), in most use cases an OSC Method will have a defined type mask. OSCKit provides a powerful and flexible API to both validate and strongly type an OSC value array."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Validate and unwrap value array with expected member "},{"type":"codeVoice","code":"String"},{"type":"text","text":":"}]},{"code":["let str = try oscMessage.values.masked(String.self)","print(\"string: \\(str)\")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The special wrapper type "},{"type":"codeVoice","code":"AnyOSCNumberValue"},{"type":"text","text":" is able to match any number and provides easy type-erased access to its contents, converting value types if necessary automatically."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Validate and unwrap value array with expected members "},{"type":"codeVoice","code":"String, Int, <number>?"},{"type":"text","text":":"}]},{"code":["let (str, int, num) = try oscMessage.values.masked(","    String.self, Int.self, AnyOSCNumberValue?.self",")","print(str, int, num?.intValue)","print(str, int, num?.doubleValue)","print(str, int, num?.base) \/\/ access to the strongly typed integer or floating-point value"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":3,"text":"Using matches(mask:) to test for a mask with type tokens","anchor":"Using-matchesmask-to-test-for-a-mask-with-type-tokens"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If value unwrapping is not needed, a mere test of value types in an OSC value sequence can be done using a mask of "},{"type":"reference","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValueToken","isActive":true},{"type":"text","text":" tokens."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be useful at barriers in more complex codebases where early return or error-throwing due to mismatching value masks may be wanted before the values are ever unwrapped and statically typed."}]},{"code":["\/\/ [String, Int, AnyOSCNumberValue?]","guard oscMessage.values.matches(","    mask: [.string, .int, .numberOptional]",") else { return }"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":3,"text":"Manually unwrapping expected value types","anchor":"Manually-unwrapping-expected-value-types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is generally easier to use "},{"type":"codeVoice","code":"masked()"},{"type":"text","text":" as demonstrated above, since it handles masking, strongly typing, as well as translation of interpolated ("},{"type":"codeVoice","code":"Int8"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int16"},{"type":"text","text":", etc.) and opaque ("},{"type":"codeVoice","code":"AnyOSCNumberValue"},{"type":"text","text":", etc.) types. However the following is generally functionally equivalent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Validate and unwrap value array with expected member "},{"type":"codeVoice","code":"String"},{"type":"text","text":":"}]},{"code":["guard oscMessage.values.count == 1 else { ... }","guard let str = oscMessage.values[0] as? String else { ... } \/\/ compulsory","print(str) \/\/ String"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Validate and unwrap value array with expected members "},{"type":"codeVoice","code":"String, Int32?, Double?"},{"type":"text","text":":"}]},{"code":["guard (1...3).contains(oscMessage.values.count) else { ... }","guard let str = oscMessage.values[0] as? String else { ... } \/\/ compulsory","let int: Int32? = oscMessage.count > 1 ? oscMessage.values[1] as? Int32 : nil \/\/ optional","let dbl: Double? = oscMessage.count > 2 ? oscMessage.values[2] as? Double : nil \/\/ optional","print(str, int, dbl) \/\/ String, Int32?, Double?"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":3,"text":"Parsing a variable number of values","anchor":"Parsing-a-variable-number-of-values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It may be desired to imperatively validate and cast values when their expected mask may be unknown."}]},{"code":["for value in oscMessage.values {","    switch value {","    case let val as String:","        print(val)","    case let val as Int32:","        print(val)","    default:","        \/\/ unhandled","    }","}"],"type":"codeListing","syntax":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/osckit\/osc-value-parsing"]}],"references":{"doc://osckit.OSCKit/documentation/OSCKit/OSCValues":{"type":"topic","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValues","navigatorTitle":[{"text":"OSCValues","kind":"identifier"}],"url":"\/documentation\/osckit\/oscvalues","title":"OSCValues","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OSCValues","kind":"identifier"}],"kind":"symbol","abstract":[],"role":"symbol"},"doc://osckit.OSCKit/documentation/OSCKit/OSC-Value-Types":{"url":"\/documentation\/osckit\/osc-value-types","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSC-Value-Types","kind":"article","abstract":[{"text":"OSC Message value types.","type":"text"}],"role":"collectionGroup","type":"topic","title":"OSC Value Types"},"doc://osckit.OSCKit/documentation/OSCKit":{"type":"topic","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit","url":"\/documentation\/osckit","title":"OSCKit","kind":"symbol","abstract":[{"type":"text","text":"Open Sound Control (OSC) library for macOS, iOS, tvOS and visionOS."}],"role":"collection"},"doc://osckit.OSCKit/documentation/OSCKit/OSC-Address-Pattern-Parsing":{"identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSC-Address-Pattern-Parsing","type":"topic","url":"\/documentation\/osckit\/osc-address-pattern-parsing","title":"OSC Address Pattern Parsing","kind":"article","abstract":[{"type":"text","text":"Methods for parsing OSC Message address patterns."}],"role":"collectionGroup"},"doc://osckit.OSCKit/documentation/OSCKit/OSCValueMaskError":{"type":"topic","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValueMaskError","navigatorTitle":[{"text":"OSCValueMaskError","kind":"identifier"}],"url":"\/documentation\/osckit\/oscvaluemaskerror","title":"OSCValueMaskError","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OSCValueMaskError","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Error thrown by ","type":"text"},{"identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValues","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"codeVoice","code":"masked(...)"},{"text":" methods.","type":"text"}],"role":"symbol"},"doc://osckit.OSCKit/documentation/OSCKit/Receiving-OSC":{"identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/Receiving-OSC","type":"topic","url":"\/documentation\/osckit\/receiving-osc","title":"Receiving OSC","kind":"article","abstract":[{"type":"text","text":"Receiving OSC messages and bundles."}],"role":"collectionGroup"},"doc://osckit.OSCKit/documentation/OSCKit/OSCMessage":{"type":"topic","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCMessage","navigatorTitle":[{"text":"OSCMessage","kind":"identifier"}],"url":"\/documentation\/osckit\/oscmessage","title":"OSCMessage","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OSCMessage","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"OSC Message.","type":"text"}],"role":"symbol"},"doc://osckit.OSCKit/documentation/OSCKit/OSCValue":{"identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValue","type":"topic","navigatorTitle":[{"text":"OSCValue","kind":"identifier"}],"title":"OSCValue","url":"\/documentation\/osckit\/oscvalue","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OSCValue","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Protocol to which all compatible OSC value types conform."}],"role":"symbol"},"doc://osckit.OSCKit/documentation/OSCKit/OSCValueToken":{"type":"topic","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValueToken","navigatorTitle":[{"kind":"identifier","text":"OSCValueToken"}],"url":"\/documentation\/osckit\/oscvaluetoken","title":"OSCValueToken","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"OSCValueToken"}],"kind":"symbol","abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/osckit.OSCKit\/documentation\/OSCKit\/OSCValue"},{"text":" type tokens, including optional variants and opaque types.","type":"text"},{"text":" ","type":"text"},{"text":"Useful for abstractions that mask sequences of values.","type":"text"}],"role":"symbol"}}}